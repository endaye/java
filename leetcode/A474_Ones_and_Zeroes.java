package leetcode;

public class A474_Ones_and_Zeroes {
	public static int findMaxForm(String[] strs, int m, int n) {
        int[][] dp = new int[m + 1][n + 1];
        for (String str : strs) {
            int[] count = count(str);
            for (int i = m; i >= count[0]; i--) {
                for (int j = n; j >= count[1]; j--) {
                    dp[i][j] = Math.max(1 + dp[i-count[0]][j-count[1]], dp[i][j]);
                }
            }
        }
        return dp[m][n];
    }
	
	private static int[] count(String s) {
		int[] result = new int[2];
		char[] array = s.toCharArray();
		for (int i : array) {
			result[i - '0']++;
		}
		return result;
	}
	
	public static void main(String[] args) {
		String[] strs1 = {"10", "0001", "111001", "1", "0"};
		int m1 = 5, n1 = 3;
		System.out.println(findMaxForm(strs1, m1, n1));
		String[] strs2 = {"10", "0", "1"};
		int m2 = 1, n2 = 1;
		System.out.println(findMaxForm(strs2, m2, n2));
		String[] strs3 = {};
		int m3 = 100, n3 = 100;
		System.out.println(findMaxForm(strs3, m3, n3));
	}

}
